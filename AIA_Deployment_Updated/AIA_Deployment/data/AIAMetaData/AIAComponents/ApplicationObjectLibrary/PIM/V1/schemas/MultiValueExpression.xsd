<xsd:schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" targetNamespace="http://xmlns.oracle.com/svc/expression"
     xmlns="http://xmlns.oracle.com/svc/expression" xmlns:sdoJava="commonj.sdo/java" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:include schemaLocation="Expression.xsd"/>
    <xsd:complexType name="MultiValueExpression" sdoJava:package="oracle.svc.expression" sdoJava:instanceClass="oracle.svc.expression.MultiValueExpression">
        <xsd:annotation>
            <xsd:documentation>Represents an expression based on a set of values.
&lt;br&gt;
  The Expression can be in the format:
  &lt;ul&gt;
    &lt;li&gt; {Attribute} {List Value Operator} {Value1, Value2, Value3, ...}
  &lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;
&lt;b&gt;Example:&lt;/b&gt; This example performs this expression on PurchaseOrders: &lt;b&gt;Total IN 500, 600, 700&lt;/b&gt;
&lt;code&gt;
&lt;pre&gt;
DataObjectFactory factory = ...
PurchaseOrderExpressionFilter filter = (PurchaseOrderExpressionFilter)factory.createDataObject(PurchaseOrderExpressionFilter.QUALIFIED_NAME);
ArrayList values = new ArrayList();
values.add(new Number(500));
values.add(new Number(600));
values.add(new Number(700));
filter.addMultiValueExpression(&quot;Total&quot;, MultiValueExpression.IN, values);
DataCriteria dc = factory.createDataObject(DataCriteria.QUALIFIED_NAME);
dc.setFilter(filter);
DataObject rootSDO = service.queryDataSource(&quot;PurchaseOrders&quot;, dc, null);
List result = (rootSDO==null)?null:(List)rootSDO.get(&quot;PurchaseOrders&quot;);
&lt;/pre&gt;
&lt;/code&gt;</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="Expression">
                <xsd:sequence>
                    <xsd:element name="AttributeName" type="xsd:string" minOccurs="0" nillable="true"/>
                    <xsd:element name="Operator" type="xsd:string" minOccurs="0" nillable="true"/>
                    <xsd:element name="Value" type="xsd:anySimpleType" minOccurs="0" maxOccurs="unbounded"
                         nillable="true"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="multiValueExpression" type="MultiValueExpression" nillable="true"/>
</xsd:schema>
